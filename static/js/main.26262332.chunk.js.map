{"version":3,"sources":["views/App.module.css","components/TrackList.module.css","components/Player.module.css","api/index.js","views/PlayerContext.js","components/Loader.js","components/Track.js","components/TrackList.js","components/Player.js","views/App.js","serviceWorker.js","index.js","components/Track.module.css"],"names":["module","exports","app","trackList","player","_callee","data","regenerator_default","a","wrap","_context","prev","next","__webpack_require__","e","then","t","bind","sent","abrupt","tracks","stop","this","PlayerContext","React","createContext","Loader","react_default","createElement","Track","_ref","track","onClick","Consumer","_ref2","currentTrack","isPlaying","id","title","artist","album","isSelected","icon","faPause","faPlay","className","cx","styles","Object","defineProperty","selected","index_es","TrackList","songs","onSelect","map","components_Track","key","Player","forwardRef","props","ref","src","concat","controls","autoPlay","App","state","playerRef","createRef","onTrackSelect","_this$state","_this","pause","play","setState","current","_loadAsyncData","_asyncRequest","cancel","_this2","_fetchTrackList","apply","arguments","fetchTrackList","_this$state2","react","fallback","components_Loader","maxDuration","Provider","value","components_TrackList","components_Player","PureComponent","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","views_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26262332.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2Diln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"trackList\":\"TrackList_trackList__rSZSB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"player\":\"Player_player__1anwo\"};","export async function fetchTrackList() {\n  const data = await import('./data/trackList.json');\n  return data.tracks;\n}\n","import React from 'react';\n\nexport const PlayerContext = React.createContext();\n","import React from 'react';\n\nconst Loader = () => <div>Loading...</div>;\n\nexport default Loader;\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\n\nimport styles from './Track.module.css';\nimport cx from 'classnames';\nimport { PlayerContext } from '../views/PlayerContext';\n\nconst Track = ({ track, onClick }) => (\n  <PlayerContext.Consumer>\n    {({ currentTrack, isPlaying }) => {\n      const { id, title, artist, album } = track;\n\n      const isSelected = currentTrack && currentTrack.id === id;\n      const icon = isSelected && isPlaying ? faPause : faPlay;\n\n      return (\n        <tr\n          className={cx(styles.track, { [styles.selected]: isSelected })}\n          onClick={onClick}\n        >\n          <td>\n            <FontAwesomeIcon icon={icon} />\n          </td>\n          <td>{title}</td>\n          <td>{artist}</td>\n          <td>{album}</td>\n        </tr>\n      );\n    }}\n  </PlayerContext.Consumer>\n);\n\nexport default Track;\n","import React from 'react';\n\nimport Track from './Track';\n\nimport styles from './TrackList.module.css';\n\nconst TrackList = ({ songs, onSelect }) => (\n  <table className={styles.trackList}>\n    <thead>\n      <tr>\n        <th />\n        <th>Song</th>\n        <th>Artist</th>\n        <th>Album</th>\n      </tr>\n    </thead>\n    <tbody>\n      {songs &&\n        songs.map(track => (\n          <Track key={track.id} track={track} onClick={() => onSelect(track)} />\n        ))}\n    </tbody>\n  </table>\n);\n\nexport default TrackList;\n","import React from 'react';\n\nimport styles from './Player.module.css';\n\nconst Player = React.forwardRef((props, ref) => {\n  const { track } = props;\n  const src = track ? `tracks/${track.id}.mp3` : null;\n\n  return (\n    <audio src={src} controls ref={ref} autoPlay className={styles.player} />\n  );\n});\n\nexport default Player;\n","import React, { PureComponent, Suspense } from 'react';\n\nimport styles from './App.module.css';\n\nimport { fetchTrackList } from '../api';\nimport { PlayerContext } from './PlayerContext';\n\nimport Loader from '../components/Loader';\nimport TrackList from '../components/TrackList';\nimport Player from '../components/Player';\n\nclass App extends PureComponent {\n  state = {\n    trackList: null,\n    currentTrack: null,\n    isPlaying: false,\n    playerRef: React.createRef()\n  };\n\n  componentDidMount() {\n    this._loadAsyncData();\n  }\n\n  componentWillUnmount() {\n    if (this._asyncRequest) {\n      this._asyncRequest.cancel();\n    }\n  }\n\n  _loadAsyncData() {\n    this._asyncRequest = fetchTrackList().then(trackList => {\n      this._asyncRequest = null;\n      this.setState({ trackList });\n    });\n  }\n\n  onTrackSelect = track => {\n    const { currentTrack, isPlaying } = this.state;\n\n    if (currentTrack && track === currentTrack) {\n      const action = isPlaying ? this.pause : this.play;\n      action();\n    } else {\n      this.setState({\n        currentTrack: track,\n        isPlaying: true\n      });\n    }\n  };\n\n  pause = () => {\n    this.state.playerRef.current.pause();\n    this.setState({\n      isPlaying: false\n    });\n  };\n\n  play = () => {\n    this.state.playerRef.current.play();\n    this.setState({\n      isPlaying: true\n    });\n  };\n\n  render() {\n    const { currentTrack, trackList, playerRef } = this.state;\n\n    return (\n      <Suspense fallback={<Loader />} maxDuration={2000}>\n        <div className={styles.app}>\n          <h1>Motion</h1>\n\n          <PlayerContext.Provider value={this.state}>\n            <TrackList songs={trackList} onSelect={this.onTrackSelect} />\n\n            <Player track={currentTrack} ref={playerRef} />\n          </PlayerContext.Provider>\n        </div>\n      </Suspense>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Concurrent mode!\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"track\":\"Track_track__WhcvQ\",\"selected\":\"Track_selected__3nxCa\"};"],"sourceRoot":""}